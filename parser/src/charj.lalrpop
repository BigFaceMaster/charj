use std::str::FromStr;

use crate::location::Loc;
use crate::lexer;
use crate::token::Token;
use crate::error::LexicalError;
use crate::pt::*;

grammar<'input>(input: &'input str, file_no: usize);

pub Charj: SourceUnit = {
    SourceUnitPart+ => SourceUnit(<>)
};

SourceUnitPart: SourceUnitPart = {
    ImportDirective => SourceUnitPart::ImportDirective(<>),
}

ImportDirective: Import = {
    "import" <s:StringLiteral> ";" => Import::Plain(s),
    "import" <s:StringLiteral> "as" <id:Identifier> ";" => Import::GlobalSymbol(s, id)
}

Identifier: Identifier = {
    <l:@L> <n:LexIdentifier> <r:@R> => Identifier{loc: Loc(file_no, l, r), name: n.to_string()}
}

StringLiteral: StringLiteral = {
    <l:@L> <s:LexStringLiteral> <r:@R> => {
        StringLiteral{ loc: Loc(file_no, l, r), string: s.to_string() }
    }
}


extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token<'input> {
        LexIdentifier => Token::Identifier(<&'input str>),
        LexStringLiteral => Token::StringLiteral(<&'input str>),

        // operators symbol

        // keywords
        "import" => Token::Import,
        "as" => Token::As,

        // other symbols
        "\n" => Token::NewLine,
        ";" => Token::Semicolon,
    }
}

